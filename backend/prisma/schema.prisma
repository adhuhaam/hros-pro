generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  fullName  String
  phone     String?
  isActive  Boolean    @default(true)
  lastLogin DateTime?
  agent     Agent?
  employee  Employee?
  userRoles UserRole[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  userRoles   UserRole[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  resource        String
  action          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([roleId], map: "UserRole_roleId_fkey")
}

model Employee {
  id            Int          @id @default(autoincrement())
  userId        Int?         @unique
  email         String       @unique
  phone         String?
  address       String?
  dob           DateTime?
  departmentId  Int?
  designationId Int?
  dateOfJoining DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  fullName      String
  employeeId    String       @unique
  salary        Float?
  status        String       @default("active")
  attendance    Attendance[]
  department    Department?  @relation(fields: [departmentId], references: [id])
  designation   Designation? @relation(fields: [designationId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])
  leaves        Leave[]
  payrolls      Payroll[]

  @@index([departmentId], map: "Employee_departmentId_fkey")
  @@index([designationId], map: "Employee_designationId_fkey")
}

model Agent {
  id         Int           @id @default(autoincrement())
  userId     Int?          @unique
  agentId    String        @unique
  fullName   String
  email      String        @unique
  phone      String?
  company    String?
  commission Float?
  status     String        @default("active")
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  user       User?         @relation(fields: [userId], references: [id])
  candidates Candidate[]
  jobs       Recruitment[]
}

model Candidate {
  id         Int         @id @default(autoincrement())
  agentId    Int
  fullName   String
  email      String
  phone      String?
  resume     String?
  position   String
  experience Int?
  status     String      @default("pending")
  notes      String?
  appliedAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  jobId      Int
  agent      Agent       @relation(fields: [agentId], references: [id])
  job        Recruitment @relation(fields: [jobId], references: [id])

  @@index([agentId], map: "Candidate_agentId_fkey")
  @@index([jobId], map: "Candidate_jobId_fkey")
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]
}

model Designation {
  id        Int        @id @default(autoincrement())
  title     String     @unique
  employees Employee[]
}

model Leave {
  id         Int      @id @default(autoincrement())
  employeeId Int
  type       String
  startDate  DateTime
  endDate    DateTime
  status     String
  reason     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId], map: "Leave_employeeId_fkey")
}

model Attendance {
  id         Int       @id @default(autoincrement())
  employeeId Int
  date       DateTime
  clockIn    DateTime?
  clockOut   DateTime?
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee  @relation(fields: [employeeId], references: [id])

  @@index([employeeId], map: "Attendance_employeeId_fkey")
}

model Payroll {
  id         Int      @id @default(autoincrement())
  employeeId Int
  month      String
  basic      Float
  deductions Float
  netPay     Float
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId], map: "Payroll_employeeId_fkey")
}

model Recruitment {
  id            Int         @id @default(autoincrement())
  position      String
  department    String
  status        String
  postedAt      DateTime    @default(now())
  closedAt      DateTime?
  applicants    String?
  numberOfPosts Int         @default(1)
  agentId       Int?
  candidates    Candidate[]
  agent         Agent?      @relation(fields: [agentId], references: [id])

  @@index([agentId], map: "Recruitment_agentId_fkey")
}

model SystemSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  isEditable  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
