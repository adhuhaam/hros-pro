// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   // 'employee', 'hr', 'admin', etc.
  employee  Employee?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id            Int         @id @default(autoincrement())
  userId        Int?        @unique
  user          User?       @relation(fields: [userId], references: [id])
  fullName      String
  email         String      @unique
  phone         String?
  address       String?
  dob           DateTime?
  departmentId  Int?
  department    Department? @relation(fields: [departmentId], references: [id])
  designationId Int?
  designation   Designation? @relation(fields: [designationId], references: [id])
  dateOfJoining DateTime?
  leaves        Leave[]
  attendance    Attendance[]
  payrolls      Payroll[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]
}

model Designation {
  id        Int        @id @default(autoincrement())
  title     String     @unique
  employees Employee[]
}

model Leave {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  type        String    // e.g., 'sick', 'casual', etc.
  startDate   DateTime
  endDate     DateTime
  status      String    // 'pending', 'approved', 'rejected'
  reason      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Attendance {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  date        DateTime
  clockIn     DateTime?
  clockOut    DateTime?
  status      String    // 'present', 'absent', 'leave', etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payroll {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  month       String    // e.g., '2024-06'
  basic       Float
  deductions  Float
  netPay      Float
  status      String    // 'generated', 'paid', etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Recruitment {
  id            Int       @id @default(autoincrement())
  position      String
  department    String
  status        String    // 'open', 'closed', etc.
  postedAt      DateTime  @default(now())
  closedAt      DateTime?
  applicants    String?   // JSON or separate table for real apps
  numberOfPosts Int       @default(1)
}
